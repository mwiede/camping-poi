{"version":3,"sources":["LocateControl.js","MyMarker.js","App.js","serviceWorker.js","index.js"],"names":["LocateControl","this","props","options","startDirectly","map","leaflet","lc","Locate","addTo","start","Component","withLeaflet","MyMarker","mark","fillColor","myIcon","L","Icon","Default","imagePath","iconUrl","iconRetinaUrl","Marker","key","id","position","latitude","longitude","icon","Popup","code","titre","description_de","onClick","geocoords","label","window","navigator","appVersion","indexOf","open","encodeURI","App","initialPosition","useState","lat","lng","roundedPosition","setRoundedPosition","setCurrentLocation","markers","setMarkers","zoom","setZoom","auswahl","mapRef","useRef","Map","filteredMarkers","filter","el","eau_noire","eau_usee","console","log","length","current","leafletElement","getCenter","url","useEffect","fetch","headers","then","response","json","data","lieux","center","ref","onMoveend","event","target","roundedLat","Math","round","roundedLng","diflat","abs","diflng","changeMapPosition","onzoomend","getZoom","onLocationfound","latlng","TileLayer","attribution","LayersControl","collapsed","Overlay","name","checked","FeatureGroup","color","strings","title","onActivate","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dfdb54c5.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport { withLeaflet } from \"react-leaflet\";\r\nimport Locate from \"leaflet.locatecontrol\";\r\n\r\nimport 'leaflet.locatecontrol/dist/L.Control.Locate.min.css'\r\nimport '@fortawesome/fontawesome-free/css/all.min.css';\r\n\r\nclass LocateControl extends Component {\r\n  componentDidMount() {\r\n    const { options, startDirectly } = this.props;\r\n    const { map } = this.props.leaflet;\r\n\r\n    const lc = new Locate(options);\r\n    lc.addTo(map);\r\n\r\n    if (startDirectly) {\r\n      // request location update and set location\r\n      lc.start();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default withLeaflet(LocateControl);","import React from 'react';\r\nimport { Marker, Popup } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nfunction MyMarker(mark, fillColor) {\r\n\r\n  var myIcon = new L.Icon.Default();\r\n  myIcon.options.imagePath = 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/';\r\n  myIcon.options.iconUrl = 'marker-icon-' + fillColor + '.png';\r\n  myIcon.options.iconRetinaUrl = 'marker-icon-2x-' + fillColor + '.png';\r\n\r\n  const openPositionInNativeApp = (geocoords, label) => {\r\n    if (window.navigator.appVersion.indexOf('Mac') !== -1) {\r\n      window.open('maps://?q=' + geocoords, '_system');\r\n    }\r\n    else {\r\n      window.open('geo:0,0?q=' + geocoords + '(' + encodeURI(label) + ')', '_system');\r\n    }\r\n  };\r\n\r\n  return <Marker\r\n    key={mark.id}\r\n    position={[\r\n      mark.latitude,\r\n      mark.longitude\r\n    ]}\r\n    icon={myIcon}\r\n  >\r\n    <Popup>\r\n      {mark.code} - {mark.titre} <br /> {mark.description_de}\r\n      <br />\r\n      <button onClick={() => openPositionInNativeApp(mark.latitude + ',' + mark.longitude, mark.titre)}>Nav</button>\r\n    </Popup>\r\n  </Marker>;\r\n}\r\nexport default MyMarker;","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport 'leaflet/dist/leaflet.css';\nimport { Map, TileLayer, LayersControl, FeatureGroup } from 'react-leaflet';\nimport LocateControl from './LocateControl'\nimport MyMarker from './MyMarker';\n\nfunction App() {\n\n  const initialPosition = [48.135, 11.581];\n\n  const [roundedPosition, setRoundedPosition] = useState({ lat: initialPosition[0], lng: initialPosition[1] });\n  const [currentLocation, setCurrentLocation] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  const [zoom, setZoom] = useState(11);\n  const [auswahl, setAuswahl] = useState('all');\n\n  const mapRef = useRef(<Map />)\n\n  const filteredMarkers = markers\n    .filter(el => auswahl === 'all' || (auswahl === 'black' && el.eau_noire === '1') || (auswahl === 'grey' && el.eau_usee === '1'));\n\n  console.log(auswahl + ' enthÃ¤lt ' + filteredMarkers.length);\n\n  const map = mapRef.current;\n  var position;\n  if (map.leafletElement != null) {\n    position = map.leafletElement.getCenter();\n  }\n\n  const cors_proxy = 'https://cors-anywhere.herokuapp.com/https://park4night.com';\n  const url = cors_proxy + `/services/V4/lieuxGetFilter.php?&latitude=${roundedPosition.lat}&longitude=${roundedPosition.lng}&context_user=guest&context_os=ANDROID&context_lang=en&langue_locale=en_EN&context_latitude=${roundedPosition.lat}&context_longitude=${roundedPosition.lng}&context_version=7.0.4&context_secondlang=it&context_thirdlang=de&isMonthPremium=false&isYearPremium=false&context_id_user=guest&os=ANDROID&apikey=guest`;\n\n  const changeMapPosition = (position) => {\n\n    const roundedLat = Math.round((position.lat) * 10) / 10;\n    const roundedLng = Math.round((position.lng) * 10) / 10;\n\n    const diflat = Math.abs(roundedLat - roundedPosition.lat) > 0.1;\n    const diflng = Math.abs(roundedLng - roundedPosition.lng) > 0.1;\n\n    if (diflat || diflng) {\n      setRoundedPosition({\n        lat: roundedLat,\n        lng: roundedLng,\n      });\n    }\n  };\n\n  const locate = (event) => {\n    const map = mapRef.current;\n    if (map != null) {\n      map.leafletElement.locate()\n    }\n  };\n\n  const centerMap = (event) => {\n    const map = mapRef.current;\n    if (currentLocation && map) {\n      map.leafletElement.setView(currentLocation, 13);\n    }\n  };\n\n  useEffect(() => {\n\n    // fetch\n    fetch(url, {\n      //mode: 'no-cors',\n      headers: { 'X-Requested-With': 'xyz' }\n    })\n      .then(response => response.json())\n      .then(data => {\n        setMarkers(data.lieux)\n      }\n      );\n    // dann marker in stat ablegen\n\n  }, [url]);\n\n  // Setup LocateControl options\n  const locateOptions = {\n    position: 'topright',\n    strings: {\n      title: 'Show me where I am, yo!'\n    },\n    onActivate: () => { } // callback before engine starts retrieving locations\n  }\n\n  return (\n    <>\n      <Map center={initialPosition} zoom={zoom} ref={mapRef}\n\n        onMoveend={(event) => {\n          console.log(event.target.getCenter());\n          changeMapPosition(event.target.getCenter());\n        }}\n\n        onzoomend={(event) => {\n          setZoom(event.target.getZoom())\n        }}\n\n        onLocationfound={(event) => {\n          setCurrentLocation(event.latlng);\n        }}\n      >\n\n\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'\n        />\n\n        <LayersControl position=\"topright\" collapsed={false}>\n\n          <LayersControl.Overlay name=\"Black Water Dump\" checked={true}>\n\n            <FeatureGroup color=\"Black\" >\n              {markers.filter(el => el.eau_noire === '1').map(mark => MyMarker(mark, 'black'))}\n            </FeatureGroup>\n          </LayersControl.Overlay>\n          <LayersControl.Overlay name=\"Grey Water Dump\" checked={true}>\n            <FeatureGroup color=\"Grey\">\n              {markers.filter(el => el.eau_usee === '1').map(mark => MyMarker(mark, 'grey'))}\n            </FeatureGroup>\n          </LayersControl.Overlay>\n\n        </LayersControl>\n\n        <LocateControl options={locateOptions} startDirectly />\n\n      </Map>\n\n      {false && <>\n        <form>\n          <label>\n            <input type=\"radio\" checked={auswahl === 'all'} onChange={(event) => { setAuswahl('all') }} /> All</label>\n          <label>\n            <input type=\"radio\" checked={auswahl === 'grey'} onChange={(event) => { setAuswahl('grey') }} /> Only show Greywater</label>\n          <label>\n            <input type=\"radio\" checked={auswahl === 'black'} onChange={(event) => { setAuswahl('black') }} /> Only show Blackwater</label>\n        </form>\n\n        {position && <>Position: {position.lat} - {position.lng}</>}\n\n        <button onClick={locate}>locate</button>\n\n        <button onClick={centerMap}>center</button>\n\n      Zoom: {zoom}\n\n      </>}\n\n    </>\n  );\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}